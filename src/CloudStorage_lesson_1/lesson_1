1. Ответить на вопросы (письменно):
------------------------------------------------
Как организовать клиент-серверное взаимодействие?

В начале разработки необходимо выбрать между двухуровневой и многоуровневой архитектурой.
Выбор в данном случае зависит от количества пользователей, которые будут работать в данной системе,
стоимости оборудования и дельнейшее обслуживания системы.
Для создания клиент-серверного приложения мой выбор пал на двухуровневую архитектуру.
Двухуровневая архитектура легко реализуема и не требует каких-либо финансовых вложений
(по примеру ранее выполненой работы "Сетовой чат")
Сервер и клиент обменивается информацией (потоками байтов) через сокет,
который открывается в момент первого подключения клиента к серверу.

------------------------------------------------
Как и в каком виде передавать файлы?

передаем содержимое файла на сервер/клиент побайтно черех сокет.
InputStream и OutputStream (или, с соответствующими конверторами, Reader и Writer) из сокета,
чтобы получить возможность трактовать соединение, как объект потока ввода/вывода.

________________________________________________
Как пересылать большие файлы?

Если файл расценивать как стрим, то в принципе можно сделать всё, что угодно,
в том числе и передавать его частями.
Идея следующая:
Человек начинает загружать файл на сервер.
Загрузка прерывается.
Через какое-то время, человек хочет возобновить отправку.
Клиент спрашивает сервер, сколько байт уже было получено, и отправляет только то, что осталось.
Важно, что именно сервер должен говорить, сколько байт он уже получил.
Число байт, которые клиент послал здесь не важны, так как между моментом,
когда клиент что-то послал, и моментом, когда сервер это записал, может произойти много чего нехорошего.

Сначала приложение отправляет на сервер размер файла,
а сервер создаёт пустой файл указанного размера и назначает ему какой-нибудь id.

Затем приложение отправляет на сервер часть файла (например 1МБ) с указание id файла и смещением от начала.
Сервер открывает файл, записывает полученный блок в нужное место и запоминает переданный размер.

При повторном запуске приложение спрашивает у сервера сколько байт файла у него есть
и продолжает передавать по частям с указанного места.

________________________________________________
Как пересылать служебные команды?

Если передовать команду от клиента к серверу, то 
запускаем цикл на сервере, в котором будет крутиться вся логика программы. 
Клиент будет работать пока он существует.
Reader ждет получения данных/сообщения, если при проверке данное сообщение будет 
соответствовать заданной команды, то выполняем данную команду.
________________________________________________
Что хранить в базе данных?

Используем реляционную СУБД MySQL

1. Таблица пользователей:
id, Имя пользователя, Фамили пользователя, логин, пароль, дата рождения

2.Таблица Данных (файлов)

id, id пользователя, наименование файла, ссылка на файл, размер файла, дата загрузки, 

3. Таблица передачи данных от пользователя к пользователю

id, id пользователя от кого передаем файл, id поль кому передаем файл, id файла, дата передачи файла


________________________________________________
Как передавать структуру каталогов/файлов?

чтобы разрешить отправку файлов между обоими компьютерами,
каждый компьютер должен будет запустить сервер (принимающий код) для прослушивания входящих файлов,
и им обоим нужно будет запустить отправляющий код, когда они хотят отправить файл.
________________________________________________
Какую библиотеку использовать для сетевого взаимодействия:
java.io, java.nio, Netty?

Пока буду использовать  библиотеку java.io (потому что ранее использовала ееи про другие мало чего знаю),
но это еще под вопросом

________________________________________________